from wx import *
from wx import grid
import xml.etree.ElementTree as ET
#import xml.etree.ElementTree.Element

class Constants:
    def __init__(self):
        self.POS_ROW_START_SYMBOL = 1
        self.POS_COL_SYMBOL = 0
        self.POS_ROW_MODULE = 0
        self.POS_COL_START_MODULE = 1
        self.POS_ROW_STORAGE = 0
        self.POS_COL_START_STORAGE = 0
        self.GRID_TOTAL_ROW = 30
        self.GRID_TOTAL_COL = 15
        self.COLOR_EXPORTED = "#FFFF00"
        self.COLOR_AUTOGENERATED = "#DDEDF7"
        self.COLOR_EMPTY_CELL = "#F2F2F2"
        self.COLOR_FILLED_CELL = "#FFFFFF"
        self.COLOR_LABEL = "#FFF2CC"
        self.COLOR_ACTIVE_BUTTON = "#87CEFA"
        self.COLOR_IDLE_BUTTON = "#D3D3D3"
        self.EXPORTED = "exported"
        self.TICK = "âœ“"
        self.ROOT_NODE = "<DATA></DATA>"


class Variables:
    constantObj = Constants()
    pan = Panel
    storageTypeButtonList = []
    storageTypeButtonEndPixelPos = 0
    addStorageButton = Button
    saveButton = Button
    gridList = []
    address = ""
    maximizedFrameSize = ""
    posRowSymbol = constantObj.POS_ROW_START_SYMBOL
    posColStorage = constantObj.POS_COL_START_STORAGE
    posColModule = constantObj.POS_COL_START_MODULE
    symbolNameList = []
    modulesPerGrid=0
    symbolsPerGrid = 0

class MainFrame(Frame):
    def __init__(self,parent,title,root):
        Frame.__init__(self,None,title="GUI")
        self.Maximize(True)
        self.variableObj = Variables()
        initializeGUI(self,root,self.variableObj)
        self.InitUI()
    def InitUI(self):
        self.Bind(EVT_CLOSE,lambda event : onClickCloseWindow(self,self.variableObj))      #For on click close button

def initializeGUI(frame,root,variableObj):
    variableObj.pan = Panel(frame)
    variableObj.maximizedFrameSize = frame.GetSize()     # To Get maximum size of frame.(dynamic size i.e. different for different resolution devices)
    generateStorageTypeButtons(variableObj,root)
    generateGrids(variableObj,root)
    loadGridValues(variableObj,root)
    selectStorageDeviceManually(variableObj,0)             #setting view to stoarageType index 0
    setOnclickToStorageButtons(variableObj)
    generateAddStorageButton(variableObj)
    setGridProperties(variableObj)
    setOnClickToGridElement(variableObj)
    generateSaveButton(variableObj)


#######################################################################################################################################
####################################################XML TO GUI#########################################################################

################################################# Read Data From XML file and Load it inside respective GRIDS##########################################################

def loadGridValues(variableObj,root):
    for storageType in root:
        for moduleName in storageType:
            loadGridModuleValues(variableObj.gridList[variableObj.posColStorage],moduleName,variableObj)
        resetSymbolNameList(variableObj)
        resetPosRowSymbol(variableObj)
        resetPosColModule(variableObj)
        variableObj.posColStorage += 1          #to get next grid index
    resetPosColStorage(variableObj)
    resetAddress(variableObj)

def resetAddress(variableObj):
    variableObj.address=""
def loadGridModuleValues(grid,moduleName,variableObj):
    putValueInGridCell(grid,variableObj.constantObj.POS_ROW_MODULE,variableObj.posColModule,moduleName.tag,variableObj.constantObj.COLOR_LABEL)
    for symbolName in moduleName:
         loadGridSymbolValues(grid,symbolName,moduleName,variableObj)
    variableObj.posColModule += 1                #to get next module Name index

def loadGridSymbolValues(grid,symbolName,moduleName,variableObj):
    color = setColorExportedOrNot(symbolName,variableObj)
    variableObj.address = moduleName.find(symbolName.tag).text
    if(symbolName.tag in variableObj.symbolNameList):       #checks whether symbolName already added to the grid
        putValueInGridCell(grid,(variableObj.symbolNameList.index(symbolName.tag) + variableObj.constantObj.POS_ROW_START_SYMBOL),variableObj.posColModule,variableObj.address,color)
    else:
        putValueInGridCell(grid,variableObj.posRowSymbol,variableObj.constantObj.POS_COL_SYMBOL,symbolName.tag,variableObj.constantObj.COLOR_LABEL)
        putValueInGridCell(grid,variableObj.posRowSymbol,variableObj.posColModule,variableObj.address,color)
        variableObj.symbolNameList.append(symbolName.tag)
        variableObj.posRowSymbol += 1

def setColorExportedOrNot(symbolName,variableObj):
    if(list(symbolName)):
        if(symbolName.find(variableObj.constantObj.EXPORTED).tag == variableObj.constantObj.EXPORTED):
            return variableObj.constantObj.COLOR_EXPORTED
    return variableObj.constantObj.COLOR_FILLED_CELL

def putValueInGridCell(grid,row,col,stringValue,color):
    grid.SetCellValue(row,col,stringValue)
    grid.SetCellBackgroundColour(row,col,color)

########################################################Reset Variables Value##################################################################################

def resetSymbolsPerGrid(variableObj):
    variableObj.symbolsPerGrid=0

def resetModulesPerGrid(variableObj):
    variableObj.modulesPerGrid = 0

def resetPosColStorage(variableObj):
    variableObj.posColStorage = variableObj.constantObj.POS_COL_START_STORAGE

def resetPosColModule(variableObj):
    variableObj.posColModule = variableObj.constantObj.POS_COL_START_MODULE

def resetPosRowSymbol(variableObj):
    variableObj.posRowSymbol = variableObj.constantObj.POS_ROW_START_SYMBOL

def resetSymbolNameList(variableObj):
    variableObj.symbolNameList = []

#########################################Generate or create Storage buttons on GUI#####################################################

def generateStorageTypeButtons(variableObj, root):
    for storageType in root:
        variableObj.storageTypeButtonList.append(Button(variableObj.pan,-1,pos=(variableObj.storageTypeButtonEndPixelPos,variableObj.constantObj.POS_ROW_STORAGE),label=storageType.tag))
        variableObj.storageTypeButtonEndPixelPos += 100


###########################################generate or create GRIDS ( Every storageType has different Grid.. )######################################################

def generateGrids(variableObj,root):
    for i in range(len(variableObj.storageTypeButtonList)):
        variableObj.gridList.append(grid.Grid(variableObj.pan,-1,pos=(0,50)))
        variableObj.gridList[i].CreateGrid(variableObj.constantObj.GRID_TOTAL_ROW,variableObj.constantObj.GRID_TOTAL_COL )
    selectStorageDeviceManually(variableObj,0)              #setting view to stoarageType index 0


def setGridProperties(variableObj):
    for grid in variableObj.gridList:
        grid.SetCellBackgroundColour(0,0,variableObj.constantObj.COLOR_LABEL)   #SETTING COLOR FOR CELL (0,0)
        grid.SetSize((variableObj.maximizedFrameSize[0])-100,variableObj.maximizedFrameSize[1] - 150)   #setting the (width, height) in pixels of the grid
        grid.SetColMinimalAcceptableWidth(70)                                  #setting minimum length of a column possible(in pixel)
        grid.SetDefaultCellAlignment(ALIGN_CENTRE,ALIGN_CENTRE)                #values will be centered aligned
        grid.AutoSizeColumns()                                                 #column will be set to the size of longest element in the column


def selectStorageDeviceManually(variableObj,index):
    for i in range(len(variableObj.storageTypeButtonList)):
        if(i==index):
            variableObj.gridList[i].Show()
            setActiveButtonColor(variableObj.storageTypeButtonList[i],variableObj)
        else:
            variableObj.gridList[i].Hide()
            setIdleButtonColor(variableObj.storageTypeButtonList[i],variableObj)

def setActiveButtonColor(button,variableObj):
    button.SetBackgroundColour(variableObj.constantObj.COLOR_ACTIVE_BUTTON)

def setIdleButtonColor(button,variableObj):
    button.SetBackgroundColour(variableObj.constantObj.COLOR_IDLE_BUTTON)



#########################################STORAGEBUTTON CLICK EVENT BUTTON ################################################################

def setOnclickToStorageButtons(variableObj):
    for i in range(len(variableObj.storageTypeButtonList)):
        variableObj.storageTypeButtonList[i].Bind(EVT_LEFT_DOWN,lambda event: onLeftClickStorageButton(event , variableObj))
        variableObj.storageTypeButtonList[i].Bind(EVT_RIGHT_DOWN,lambda event: onRightClickStorageButton(event, variableObj))

def onLeftClickStorageButton(event,variableObj):
    clickedButtonLabel = event.GetEventObject().GetLabel()
    for i in range(len(variableObj.storageTypeButtonList)):
        if(variableObj.storageTypeButtonList[i].GetLabel() == clickedButtonLabel):
            variableObj.gridList[i].Show()
            setActiveButtonColor(variableObj.storageTypeButtonList[i],variableObj)      #changing selected button color to active
        else:
            variableObj.gridList[i].Hide()
            setIdleButtonColor(variableObj.storageTypeButtonList[i],variableObj)



###################################################################################################################################################################
#########################################################################MODIFICATION IN THE GUI###################################################################

########################################################ON CLICK CLOSE 'X' SYMBOL ON THE TOP RIGHT CORNER#########################################################

def onClickCloseWindow(frame,variableObj):
    dialog = MessageDialog(frame, message = ("Want to save your changes?"), caption = "Caption", style = YES_NO|CANCEL, pos = DefaultPosition)
    dialog.SetYesNoLabels("Save", "Don't Save")
    response = dialog.ShowModal()

    if(response ==ID_YES):                                      #For save button in messageDialog
        generateXML(variableObj)
        frame.Destroy()
    if(response == ID_NO):                                      #For Don't save Button in messageDialog
        frame.Destroy()


###################################################################GENERATE SAVE BUTTON############################################################################

def generateSaveButton(variableObj):
    width = ((variableObj.maximizedFrameSize[0]/2) - 44)                #for button position related to the total width devided by 2
    height = (variableObj.maximizedFrameSize[1]-80)                     #for button position related to the total height of the window
    variableObj.saveButton = Button(variableObj.pan,id=ID_ANY,pos=(width,height),label="SAVE")
    variableObj.saveButton.SetBitmapLabel(ArtProvider.GetBitmap(ART_FLOPPY, ART_MENU))
    variableObj.saveButton.SetBackgroundColour(variableObj.constantObj.COLOR_IDLE_BUTTON)
    variableObj.saveButton.Bind(EVT_LEFT_DOWN,lambda event:onClickSaveButton(variableObj))


###################################################################ON CLICK SAVE BUTTON############################################################################

def onClickSaveButton(variableObj):
    dialog = MessageDialog(variableObj.pan, message = ("Are you sure you want to SAVE changes?"), caption = "Caption", style = YES_NO, pos = DefaultPosition)
    dialog.SetYesNoLabels("SAVE", "CANCEL")
    response = dialog.ShowModal()

    if(response == ID_YES):
        generateXML(variableObj)


####################################################################GENERATE ADD STORAGE BUTTON#####################################################################################

def generateAddStorageButton(variableObj):
    variableObj.addStorageButton = Button(variableObj.pan,id=ID_ANY,size=(30,-1),pos=((variableObj.storageTypeButtonEndPixelPos+100),0))
    variableObj.addStorageButton.SetBitmapLabel(ArtProvider.GetBitmap(ART_PLUS, ART_MENU))
    variableObj.addStorageButton.Bind(EVT_LEFT_DOWN,lambda event:onClickAddStorageButton(event,variableObj))


##########################################ADD STORAGE BUTTON ONCLICK EVENT #######################################################

def onClickAddStorageButton(event, variableObj):
    index = len(variableObj.storageTypeButtonList)              #index of new storageType button
    #creating new StorageButton
    variableObj.storageTypeButtonList.append(Button(variableObj.pan,-1,pos=(variableObj.storageTypeButtonEndPixelPos,variableObj.constantObj.POS_ROW_STORAGE),label="New_Storage"))
    createGridForNewStorage(variableObj,index)
    setOnClickForNewStorageType(variableObj)
    variableObj.storageTypeButtonEndPixelPos += 100
    variableObj.addStorageButton.Hide()                         #hiding old addStorageButton
    generateAddStorageButton(variableObj)                   #generating new addStorageButton at +100 position

def setOnClickForNewStorageType(variableObj):
    setOnclickToStorageButtons(variableObj)
    setOnClickToGridElement(variableObj)

def createGridForNewStorage(variableObj,index):
    variableObj.gridList.append(grid.Grid(variableObj.pan,-1,pos=(0,50)))
    variableObj.gridList[index].CreateGrid(variableObj.constantObj.GRID_TOTAL_ROW,variableObj.constantObj.GRID_TOTAL_COL )
    setGridProperties(variableObj)
    selectStorageDeviceManually(variableObj,index)                #set view to newly generated storage


################################################################ST0RAGE BUTTON RIGHT CLICK EVENT POPUP MENU#####################################################

def onRightClickStorageButton(event,variableObj):
    button = event.GetEventObject()
    indexOfButton = variableObj.storageTypeButtonList.index(button)
    menu = Menu()
    rename=menu.Append(1,"Rename")
    delete=menu.Append(2,"Delete")
    menu.Bind(EVT_MENU,lambda event:onClickStorageButtonRenamePopupMenu(button,variableObj), id=1)
    menu.Bind(EVT_MENU,lambda event:onClickStorageButtonDeletePopupMenu(button,variableObj,indexOfButton), id=2)
    button.PopupMenu(menu)

def onClickStorageButtonRenamePopupMenu(button,variableObj):
    button.Hide()
    textBox=TextCtrl(variableObj.pan,pos=button.GetPosition(),style=TE_PROCESS_ENTER,size=(88,26))    #same as size of button i.e.(88,26)
    textBox.Bind(EVT_TEXT_ENTER,lambda event:OnEnterPressed(textBox,button))

def OnEnterPressed(textBox,button):
    button.SetLabel(textBox.GetValue())
    textBox.Hide()
    button.Show()

def onClickStorageButtonDeletePopupMenu(button,variableObj,index):
    dialog = MessageDialog(variableObj.pan, message = ("Are you sure you want to delete " + button.GetLabel()+" ?"), caption = "Caption", style = YES_NO, pos = DefaultPosition)
    response = dialog.ShowModal()
    if(response == ID_YES):
        button.Hide()
        variableObj.gridList[index].Hide()
        variableObj.storageTypeButtonList.remove(button)
        variableObj.gridList.remove(variableObj.gridList[index])


##################################################################GRID CLICK EVENT POPUP MENU##################################################################

def setOnClickToGridElement(variableObj):
    for i in range(len(variableObj.storageTypeButtonList)):
        variableObj.gridList[i].Bind(grid.EVT_GRID_CELL_RIGHT_CLICK,lambda event:onRightClickGrid(event,variableObj))

def onRightClickGrid(event,variableObj):
    grid = event.GetEventObject()
    currentCellRow=event.GetRow()
    currentCellCol=event.GetCol()
    menu = Menu()
    grid.GoToCell(currentCellRow,currentCellCol)                            #make the clicked cell current or selected
    addExportedToGridPopupMenu(menu,grid,variableObj,currentCellRow,currentCellCol)
    menu.Bind(EVT_MENU,lambda event:onRightClickGridPopupMenu(event,grid,variableObj,currentCellRow,currentCellCol), id=1)
    grid.PopupMenu(menu)

def addExportedToGridPopupMenu(menu,grid,variableObj,currentCellRow,currentCellCol):
    if(grid.GetCellBackgroundColour(currentCellRow,currentCellCol) == variableObj.constantObj.COLOR_EXPORTED):
        exportedItem = menu.Append(1,variableObj.constantObj.TICK + "Exported")
    else:
        exportedItem=menu.Append(1,"Exported")

def onRightClickGridPopupMenu(event,grid,variableObj,currentCellRow,currentCellCol):
    if(grid.GetCellBackgroundColour(currentCellRow,currentCellCol) == variableObj.constantObj.COLOR_EXPORTED):
        grid.SetCellBackgroundColour(currentCellRow,currentCellCol,variableObj.constantObj.COLOR_FILLED_CELL)
    else:
        grid.SetCellBackgroundColour(currentCellRow,currentCellCol,variableObj.constantObj.COLOR_EXPORTED)


###########################################################################GENERATE XML############################################################################

def generateXML(variableObj):
    outfile=open("Data.xml","r+")
    root = ET.fromstring(variableObj.constantObj.ROOT_NODE)
    writeDataTag(variableObj,root)
    enterNewLinesInRoot(root)
    ET.ElementTree(root).write("DataOut.xml",encoding="utf-8", xml_declaration=True)



def writeDataTag(variableObj,root):
    for storageCurrent in range(len(variableObj.storageTypeButtonList)):
        storageTypeName=variableObj.storageTypeButtonList[storageCurrent].GetLabel()
        storageType = ET.Element(storageTypeName)
        root.append(storageType)
        writeModuleNameTag(storageCurrent,variableObj,storageType)

def writeModuleNameTag(storageCurrent,variableObj,storageType):
    countModulesPerGrid(storageCurrent,variableObj)
    countSymbolsPerGrid(storageCurrent,variableObj)
    for moduleCurrent in range(variableObj.modulesPerGrid):
        moduleName=variableObj.gridList[storageCurrent].GetCellValue(variableObj.constantObj.POS_ROW_MODULE,variableObj.posColModule)
        module = ET.Element(moduleName)
        storageType.append(module)
        writeSymbolNameTag(storageCurrent,variableObj,module)
        variableObj.posColModule += 1
    resetPosColModule(variableObj)
    resetModulesPerGrid(variableObj)
    resetSymbolsPerGrid(variableObj)

def writeSymbolNameTag(storageCurrent,variableObj,module):
    for symbolCurrent in range(variableObj.symbolsPerGrid):
        if(addressExist(storageCurrent,variableObj)):   #symbol tag will only create if the address exists in that symbol
            symbolName = variableObj.gridList[storageCurrent].GetCellValue(variableObj.posRowSymbol,variableObj.constantObj.POS_COL_SYMBOL)
            symbol = ET.Element(symbolName)
            symbol.text = variableObj.gridList[storageCurrent].GetCellValue(variableObj.posRowSymbol,variableObj.posColModule)
            module.append(symbol)
            writeExportedTag(storageCurrent,variableObj,symbol)
        variableObj.posRowSymbol += 1
    resetPosRowSymbol(variableObj)

def writeExportedTag(storageCurrent,variableObj,symbol):
    if((variableObj.gridList[storageCurrent].GetCellBackgroundColour(variableObj.posRowSymbol,variableObj.posColModule)) ==  (variableObj.constantObj.COLOR_EXPORTED)):
        exported = ET.Element(variableObj.constantObj.EXPORTED)
        symbol.append(exported)

def addressExist(storageCurrent,variableObj):
    return (bool(variableObj.gridList[storageCurrent].GetCellValue(variableObj.posRowSymbol,variableObj.posColModule)))

def countSymbolsPerGrid(i,variableObj):
    while variableObj.gridList[i].GetCellValue(variableObj.posRowSymbol,variableObj.constantObj.POS_COL_SYMBOL):
        variableObj.posRowSymbol += 1
    variableObj.symbolsPerGrid += (variableObj.posRowSymbol - 1)
    resetPosRowSymbol(variableObj)

def countModulesPerGrid(i,variableObj):
    while variableObj.gridList[i].GetCellValue(variableObj.constantObj.POS_ROW_MODULE,variableObj.posColModule):
        variableObj.posColModule += 1
    variableObj.modulesPerGrid += (variableObj.posColModule - 1)
    resetPosColModule(variableObj)



def enterNewLinesInRoot(root,level=0):                                  #To add line between tags
    i = "\n" + level*"  "
    if len(root):
        if not root.text or not root.text.strip():
            root.text = i + "  "
        if not root.tail or not root.tail.strip():
            root.tail = i
        for root in root:
            enterNewLinesInRoot(root, level+1)
        if not root.tail or not root.tail.strip():
            if(root.tag != "exported"):
                root.tail = i
    else:
        if level and (not root.tail or not root.tail.strip()):
            if(root.tag != "exported"):
                root.tail = i

###################################################################################################################################################################
#####################################################MAIN FUNCTION CALL############################################################################################


def main():
    app=App()
    infile=open("Data.xml","r")
    root = ET.fromstring(infile.read())
    MainFrame(None,"GUI",root).Show()
    app.MainLoop()

if __name__ == "__main__":
    main()


##################################################################################################################################
