from wx import *
from wx import grid
import xml.etree.ElementTree as ET

class Constants:
    def __init__(self):
        self.POSROWSTARTSYMBOL = 1
        self.POSCOLSYMBOL = 0
        self.POSROWMODULE = 0
        self.POSCOLSTARTMODULE = 1
        self.POSROWSTORAGE = 0
        self.POSCOLSTARTSTORAGE = 0
        self.GRIDTOTALROW = 30
        self.GRIDTOTALCOL = 15
        self.COLOREXPORTED = "#FFFF00"
        self.COLORAUTOGENERATED = "#DDEDF7"
        self.COLOREMPTYCELL = "#F2F2F2"
        self.COLORFILLEDCELL = "#FFFFFF"
        self.COLORLABEL = "#FFF2CC"
        self.COLORACTIVEBUTTON = "#87CEFA"
        self.COLORIDLEBUTTON = "#D3D3D3"
        self.EXPORTED = "exported"

class Variables:
    constantObj = Constants()
    storageTypeButtonList = []
    storageTypeButtonColPos = 0
    gridList = []
    address = ""
    posRowSymbol = constantObj.POSROWSTARTSYMBOL
    posColStorage = constantObj.POSCOLSTARTSTORAGE
    posColModule = constantObj.POSCOLSTARTMODULE
    symbolNameList = []


class MainFrame(Frame):
    def __init__(self,parent,title,root):
        Frame.__init__(self,None,title="GUI")
        self.pan = Panel(self)
        self.variableObj = Variables()
        generateStorageTypeButtons(self.pan,self.variableObj,root)
        generateGrids(self.pan,self.variableObj,root)
        loadGridValues(self.variableObj,root)
        setFirstTimeViewToStorageFirst(self.variableObj)
        setOnclickToButtons(self.variableObj)
        #self.variableObj.gridList[2].Hide()
        #self.variableObj.gridList[1].Hide()
        #self.variableObj.gridList[0].Hide()
        setGridProperties(self.variableObj)


#########################################Generate or create Storage buttons on GUI################################################################################

def generateStorageTypeButtons(pan, variableObj, root):
    for storageType in root:
        variableObj.storageTypeButtonList.append(Button(pan,-1,pos=(variableObj.storageTypeButtonColPos,variableObj.constantObj.POSROWSTORAGE),label=storageType.tag))
        variableObj.storageTypeButtonColPos += 100

###########################################generate or create GRIDS ( Every storageType has different Grid.. )######################################################

def generateGrids(pan,variableObj,root):
    for i in range(len(variableObj.storageTypeButtonList)):
        variableObj.gridList.append(grid.Grid(pan,-1,pos=(0,50)))
        variableObj.gridList[i].CreateGrid(variableObj.constantObj.GRIDTOTALROW,variableObj.constantObj.GRIDTOTALCOL )
    setFirstTimeViewToStorageFirst(variableObj)


def setGridProperties(variableObj):
    for grid in variableObj.gridList:
        grid.SetCellBackgroundColour(0,0,variableObj.constantObj.COLORLABEL)   #SETTING COLOR FOR CELL (0,0)
        grid.SetSize(grid.GetBestSize())                                       #setting the width and height of the grid
        grid.SetColMinimalAcceptableWidth(70)                                  #setting minimum length of a column possible(in pixel)
        grid.SetDefaultCellAlignment(ALIGN_CENTRE,ALIGN_CENTRE)                #values will be centered aligned
        grid.AutoSizeColumns()                                                 #column will be set to the size of longest element in the column


def setFirstTimeViewToStorageFirst(variableObj):
    for i in range(len(variableObj.storageTypeButtonList)):
        if(i==0):
            variableObj.gridList[i].Show()
            setActiveButtonColor(variableObj.storageTypeButtonList[i],variableObj)
        else:
            variableObj.gridList[i].Hide()
            setIdleButtonColor(variableObj.storageTypeButtonList[i],variableObj)

def setActiveButtonColor(button,variableObj):
    button.SetBackgroundColour(variableObj.constantObj.COLORACTIVEBUTTON)

def setIdleButtonColor(button,variableObj):
    button.SetBackgroundColour(variableObj.constantObj.COLORIDLEBUTTON)


#########################################generate button onclick event and binding those event to button################################################################

def setOnclickToButtons(variableObj):
    for i in range(len(variableObj.storageTypeButtonList)):
        variableObj.storageTypeButtonList[i].Bind(EVT_BUTTON,lambda event: onclick(event , variableObj))

def onclick(event,variableObj):
    clickedButtonLabel = event.GetEventObject().GetLabel()
    for i in range(len(variableObj.storageTypeButtonList)):
        if(variableObj.storageTypeButtonList[i].GetLabel() == clickedButtonLabel):
            variableObj.gridList[i].Show()
            setActiveButtonColor(variableObj.storageTypeButtonList[i],variableObj)
        else:
            variableObj.gridList[i].Hide()
            setIdleButtonColor(variableObj.storageTypeButtonList[i],variableObj)

################################################# Read Data From XML file and Load it inside respective GRIDS##########################################################

def loadGridValues(variableObj,root):
    for storageType in root:
        for moduleName in storageType:
            loadGridModuleValues(variableObj.gridList[variableObj.posColStorage],moduleName,variableObj)
        resetSymbolNameList(variableObj)
        resetPosRowSymbol(variableObj)
        resetPosColModule(variableObj)
        variableObj.posColStorage += 1          #to get next grid index
    resetPosColStorage(variableObj)

def loadGridModuleValues(grid,moduleName,variableObj):
    putValueInGridCell(grid,variableObj.constantObj.POSROWMODULE,variableObj.posColModule,moduleName.tag,variableObj.constantObj.COLORLABEL)
    for symbolName in moduleName:
         loadGridSymbolValues(grid,symbolName,moduleName,variableObj)
    variableObj.posColModule += 1                #to get next module Name index

def loadGridSymbolValues(grid,symbolName,moduleName,variableObj):
    color = setColorExportedOrNot(symbolName,variableObj)
    variableObj.address = moduleName.find(symbolName.tag).text
    if(symbolName.tag in variableObj.symbolNameList):       #checks whether symbolName already added to the grid
        putValueInGridCell(grid,(variableObj.symbolNameList.index(symbolName.tag) + variableObj.constantObj.POSROWSTARTSYMBOL),variableObj.posColModule,variableObj.address,color)
    else:
        putValueInGridCell(grid,variableObj.posRowSymbol,variableObj.constantObj.POSCOLSYMBOL,symbolName.tag,variableObj.constantObj.COLORLABEL)
        putValueInGridCell(grid,variableObj.posRowSymbol,variableObj.posColModule,variableObj.address,color)
        variableObj.symbolNameList.append(symbolName.tag)
        variableObj.posRowSymbol += 1

def setColorExportedOrNot(symbolName,variableObj):
    if(list(symbolName)):
        if(symbolName.find(variableObj.constantObj.EXPORTED).tag == variableObj.constantObj.EXPORTED):
            return variableObj.constantObj.COLOREXPORTED
    return variableObj.constantObj.COLORFILLEDCELL

def putValueInGridCell(grid,row,col,stringValue,color):
    grid.SetCellValue(row,col,stringValue)
    grid.SetCellBackgroundColour(row,col,color)



def resetPosColStorage(variableObj):
    variableObj.posColStorage = variableObj.constantObj.POSCOLSTARTSTORAGE

def resetPosColModule(variableObj):
    variableObj.posColModule = variableObj.constantObj.POSCOLSTARTMODULE

def resetPosRowSymbol(variableObj):
    variableObj.posRowSymbol = variableObj.constantObj.POSROWSTARTSYMBOL

def resetSymbolNameList(variableObj):
    variableObj.symbolNameList = []


if __name__ == "__main__":

    app=App()
    infile=open("Data.xml","r")
    root = ET.fromstring(infile.read())
    MainFrame(None,"GUI",root).Show()
    app.MainLoop()
